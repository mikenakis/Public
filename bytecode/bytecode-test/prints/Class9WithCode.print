■ ByteCodeType version = 63.0, accessFlags = [public, super], this = io.github.mikenakis.bytecode.test.model.Class9WithCode, super = java.lang.Object
├─■ interfaces: 0 items
├─■ extraTypes: 0 items
├─■ fields: 3 items
│ ├─■ [0] ByteCodeField accessFlags = [private, final], prototype = java.lang.String str
│ │ └─■ attributeSet: 0 items
│ ├─■ [1] ByteCodeField accessFlags = [private], prototype = int pos
│ │ └─■ attributeSet: 0 items
│ └─■ [2] ByteCodeField accessFlags = [private], prototype = int ch
│   └─■ attributeSet: 0 items
├─■ methods: 8 items
│ ├─■ [0] ByteCodeMethod accessFlags = [public, static], prototype = double eval( java.lang.String )
│ │ └─■ attributes: 2 items
│ │   ├─■ [0] CodeAttribute maxStack = 3, maxLocals = 2
│ │   │ ├─■ instructions: 8 entries
│ │   │ │ ├─■ L9: // Class9WithCode parser = new Class9WithCode( str );
│ │   │ │ ├─■         NEW io.github.mikenakis.bytecode.test.model.Class9WithCode
│ │   │ │ ├─■         DUP
│ │   │ │ ├─■         ALOAD 0
│ │   │ │ ├─■         INVOKESPECIAL reference = Plain; void io.github.mikenakis.bytecode.test.model.Class9WithCode.<init>( java.lang.String )
│ │   │ │ ├─■         ASTORE 1
│ │   │ │ ├─■ L10: // return parser.parse();
│ │   │ │ ├─■         ALOAD 1
│ │   │ │ ├─■         INVOKEVIRTUAL reference = Plain; double io.github.mikenakis.bytecode.test.model.Class9WithCode.parse()
│ │   │ │ └─■         DRETURN
│ │   │ ├─■ exceptionInfos: 0 items
│ │   │ └─■ attributeSet: 2 items
│ │   │   ├─■ [0] LineNumberTableAttribute; 2 items
│ │   │   │ ├─■ [0] LineNumberTableEntry lineNumber = 9, start = L9
│ │   │   │ └─■ [1] LineNumberTableEntry lineNumber = 10, start = L10
│ │   │   └─■ [1] LocalVariableTableAttribute; 2 items
│ │   │     ├─■ [0] LocalVariableTableEntry index = 0, start = L9, end = @end, prototype = java.lang.String str
│ │   │     └─■ [1] LocalVariableTableEntry index = 1, start = L10, end = @end, prototype = io.github.mikenakis.bytecode.test.model.Class9WithCode parser
│ │   └─■ [1] MethodParametersAttribute; 1 items
│ │     └─■ [0] MethodParameter accessFlags = [], name = "str"
│ ├─■ [1] ByteCodeMethod accessFlags = [public], prototype = void <init>( java.lang.String )
│ │ └─■ attributes: 2 items
│ │   ├─■ [0] CodeAttribute maxStack = 2, maxLocals = 2
│ │   │ ├─■ instructions: 9 entries
│ │   │ │ ├─■ L18: // {
│ │   │ │ ├─■         ALOAD 0
│ │   │ │ ├─■         INVOKESPECIAL reference = Plain; void java.lang.Object.<init>()
│ │   │ │ ├─■ L14: // private int pos = -1;
│ │   │ │ ├─■         ALOAD 0
│ │   │ │ ├─■         LDC -1
│ │   │ │ ├─■         PUTFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.pos
│ │   │ │ ├─■ L19: // this.str = str;
│ │   │ │ ├─■         ALOAD 0
│ │   │ │ ├─■         ALOAD 1
│ │   │ │ ├─■         PUTFIELD java.lang.String io.github.mikenakis.bytecode.test.model.Class9WithCode.str
│ │   │ │ ├─■ L20: // }
│ │   │ │ └─■         RETURN
│ │   │ ├─■ exceptionInfos: 0 items
│ │   │ └─■ attributeSet: 2 items
│ │   │   ├─■ [0] LineNumberTableAttribute; 4 items
│ │   │   │ ├─■ [0] LineNumberTableEntry lineNumber = 18, start = L18
│ │   │   │ ├─■ [1] LineNumberTableEntry lineNumber = 14, start = L14
│ │   │   │ ├─■ [2] LineNumberTableEntry lineNumber = 19, start = L19
│ │   │   │ └─■ [3] LineNumberTableEntry lineNumber = 20, start = L20
│ │   │   └─■ [1] LocalVariableTableAttribute; 2 items
│ │   │     ├─■ [0] LocalVariableTableEntry index = 0, start = L18, end = @end, prototype = io.github.mikenakis.bytecode.test.model.Class9WithCode this
│ │   │     └─■ [1] LocalVariableTableEntry index = 1, start = L18, end = @end, prototype = java.lang.String str
│ │   └─■ [1] MethodParametersAttribute; 1 items
│ │     └─■ [0] MethodParameter accessFlags = [], name = "str"
│ ├─■ [2] ByteCodeMethod accessFlags = [private], prototype = void nextChar()
│ │ └─■ attributes: 1 items
│ │   └─■ [0] CodeAttribute maxStack = 4, maxLocals = 1
│ │     ├─■ instructions: 21 entries
│ │     │ ├─■ L24: // ch = (++pos < str.length()) ? str.charAt( pos ) : -1;
│ │     │ ├─■         ALOAD 0
│ │     │ ├─■         ALOAD 0
│ │     │ ├─■         DUP
│ │     │ ├─■         GETFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.pos
│ │     │ ├─■         LDC 1
│ │     │ ├─■         IADD
│ │     │ ├─■         DUP_X1
│ │     │ ├─■         PUTFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.pos
│ │     │ ├─■         ALOAD 0
│ │     │ ├─■         GETFIELD java.lang.String io.github.mikenakis.bytecode.test.model.Class9WithCode.str
│ │     │ ├─■         INVOKEVIRTUAL reference = Plain; int java.lang.String.length()
│ │     │ ├─■         IF_ICMPGE T1
│ │     │ ├─■         ALOAD 0
│ │     │ ├─■         GETFIELD java.lang.String io.github.mikenakis.bytecode.test.model.Class9WithCode.str
│ │     │ ├─■         ALOAD 0
│ │     │ ├─■         GETFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.pos
│ │     │ ├─■         INVOKEVIRTUAL reference = Plain; char java.lang.String.charAt( int )
│ │     │ ├─■         GOTO T2
│ │     │ ├─■ T1:     LDC -1
│ │     │ ├─■ T2:     PUTFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.ch
│ │     │ ├─■ L25: // }
│ │     │ └─■         RETURN
│ │     ├─■ exceptionInfos: 0 items
│ │     └─■ attributeSet: 3 items
│ │       ├─■ [0] LineNumberTableAttribute; 2 items
│ │       │ ├─■ [0] LineNumberTableEntry lineNumber = 24, start = L24
│ │       │ └─■ [1] LineNumberTableEntry lineNumber = 25, start = L25
│ │       ├─■ [1] LocalVariableTableAttribute; 1 items
│ │       │ └─■ [0] LocalVariableTableEntry index = 0, start = L24, end = @end, prototype = io.github.mikenakis.bytecode.test.model.Class9WithCode this
│ │       └─■ [2] StackMapTableAttribute; 2 items
│ │         ├─■ [0] SameLocals1StackItemFrame target = T1
│ │         │ └─■ stackVerificationType: ObjectVerificationType type = io.github.mikenakis.bytecode.test.model.Class9WithCode
│ │         └─■ [1] FullFrame target = T2
│ │           ├─■ localVerificationTypes: 1 items
│ │           │ └─■ [0] ObjectVerificationType type = io.github.mikenakis.bytecode.test.model.Class9WithCode
│ │           └─■ stackVerificationTypes: 2 items
│ │             ├─■ [0] ObjectVerificationType type = io.github.mikenakis.bytecode.test.model.Class9WithCode
│ │             └─■ [1] SimpleVerificationType Integer
│ ├─■ [3] ByteCodeMethod accessFlags = [private], prototype = boolean eat( int )
│ │ └─■ attributes: 2 items
│ │   ├─■ [0] CodeAttribute maxStack = 2, maxLocals = 2
│ │   │ ├─■ instructions: 17 entries
│ │   │ │ ├─■ L30: // while( ch == ' ' )
│ │   │ │ ├─■         ALOAD 0
│ │   │ │ ├─■         GETFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.ch
│ │   │ │ ├─■         LDC 32
│ │   │ │ ├─■         IF_ICMPNE L32
│ │   │ │ ├─■ L31: // nextChar();
│ │   │ │ ├─■         ALOAD 0
│ │   │ │ ├─■         INVOKEVIRTUAL reference = Plain; void io.github.mikenakis.bytecode.test.model.Class9WithCode.nextChar()
│ │   │ │ ├─■         GOTO L30
│ │   │ │ ├─■ L32: // if( ch == charToEat )
│ │   │ │ ├─■         ALOAD 0
│ │   │ │ ├─■         GETFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.ch
│ │   │ │ ├─■         ILOAD 1
│ │   │ │ ├─■         IF_ICMPNE L37
│ │   │ │ ├─■ L34: // nextChar();
│ │   │ │ ├─■         ALOAD 0
│ │   │ │ ├─■         INVOKEVIRTUAL reference = Plain; void io.github.mikenakis.bytecode.test.model.Class9WithCode.nextChar()
│ │   │ │ ├─■ L35: // return true;
│ │   │ │ ├─■         LDC 1
│ │   │ │ ├─■         IRETURN
│ │   │ │ ├─■ L37: // return false;
│ │   │ │ ├─■         LDC 0
│ │   │ │ └─■         IRETURN
│ │   │ ├─■ exceptionInfos: 0 items
│ │   │ └─■ attributeSet: 3 items
│ │   │   ├─■ [0] LineNumberTableAttribute; 6 items
│ │   │   │ ├─■ [0] LineNumberTableEntry lineNumber = 30, start = L30
│ │   │   │ ├─■ [1] LineNumberTableEntry lineNumber = 31, start = L31
│ │   │   │ ├─■ [2] LineNumberTableEntry lineNumber = 32, start = L32
│ │   │   │ ├─■ [3] LineNumberTableEntry lineNumber = 34, start = L34
│ │   │   │ ├─■ [4] LineNumberTableEntry lineNumber = 35, start = L35
│ │   │   │ └─■ [5] LineNumberTableEntry lineNumber = 37, start = L37
│ │   │   ├─■ [1] LocalVariableTableAttribute; 2 items
│ │   │   │ ├─■ [0] LocalVariableTableEntry index = 0, start = L30, end = @end, prototype = io.github.mikenakis.bytecode.test.model.Class9WithCode this
│ │   │   │ └─■ [1] LocalVariableTableEntry index = 1, start = L30, end = @end, prototype = int charToEat
│ │   │   └─■ [2] StackMapTableAttribute; 3 items
│ │   │     ├─■ [0] SameFrame target = L30
│ │   │     ├─■ [1] SameFrame target = L32
│ │   │     └─■ [2] SameFrame target = L37
│ │   └─■ [1] MethodParametersAttribute; 1 items
│ │     └─■ [0] MethodParameter accessFlags = [], name = "charToEat"
│ ├─■ [4] ByteCodeMethod accessFlags = [public], prototype = double parse()
│ │ └─■ attributes: 1 items
│ │   └─■ [0] CodeAttribute maxStack = 3, maxLocals = 3
│ │     ├─■ instructions: 21 entries
│ │     │ ├─■ L42: // nextChar();
│ │     │ ├─■         ALOAD 0
│ │     │ ├─■         INVOKEVIRTUAL reference = Plain; void io.github.mikenakis.bytecode.test.model.Class9WithCode.nextChar()
│ │     │ ├─■ L43: // double x = parseExpression();
│ │     │ ├─■         ALOAD 0
│ │     │ ├─■         INVOKEVIRTUAL reference = Plain; double io.github.mikenakis.bytecode.test.model.Class9WithCode.parseExpression()
│ │     │ ├─■         DSTORE 1
│ │     │ ├─■ L44: // if( pos < str.length() )
│ │     │ ├─■         ALOAD 0
│ │     │ ├─■         GETFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.pos
│ │     │ ├─■         ALOAD 0
│ │     │ ├─■         GETFIELD java.lang.String io.github.mikenakis.bytecode.test.model.Class9WithCode.str
│ │     │ ├─■         INVOKEVIRTUAL reference = Plain; int java.lang.String.length()
│ │     │ ├─■         IF_ICMPGE L46
│ │     │ ├─■ L45: // throw new RuntimeException( "Unexpected: " + (char)ch );
│ │     │ ├─■         NEW java.lang.RuntimeException
│ │     │ ├─■         DUP
│ │     │ ├─■         ALOAD 0
│ │     │ ├─■         GETFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.ch
│ │     │ ├─■         I2C
│ │     │ ├─■         INVOKEDYNAMIC prototype = java.lang.String makeConcatWithConstants( char )
│ │     │ │ └─■                 bootstrapMethod: BootstrapMethod methodHandle = MethodHandleDesc[STATIC/StringConcatFactory::makeConcatWithConstants(MethodHandles$Lookup,String,MethodType,String,Object[])CallSite] arguments: StringValueConstant( "Unexpected: \u0001" )
│ │     │ ├─■         INVOKESPECIAL reference = Plain; void java.lang.RuntimeException.<init>( java.lang.String )
│ │     │ ├─■         ATHROW
│ │     │ ├─■ L46: // return x;
│ │     │ ├─■         DLOAD 1
│ │     │ └─■         DRETURN
│ │     ├─■ exceptionInfos: 0 items
│ │     └─■ attributeSet: 3 items
│ │       ├─■ [0] LineNumberTableAttribute; 5 items
│ │       │ ├─■ [0] LineNumberTableEntry lineNumber = 42, start = L42
│ │       │ ├─■ [1] LineNumberTableEntry lineNumber = 43, start = L43
│ │       │ ├─■ [2] LineNumberTableEntry lineNumber = 44, start = L44
│ │       │ ├─■ [3] LineNumberTableEntry lineNumber = 45, start = L45
│ │       │ └─■ [4] LineNumberTableEntry lineNumber = 46, start = L46
│ │       ├─■ [1] LocalVariableTableAttribute; 2 items
│ │       │ ├─■ [0] LocalVariableTableEntry index = 0, start = L42, end = @end, prototype = io.github.mikenakis.bytecode.test.model.Class9WithCode this
│ │       │ └─■ [1] LocalVariableTableEntry index = 1, start = L44, end = @end, prototype = double x
│ │       └─■ [2] StackMapTableAttribute; 1 items
│ │         └─■ [0] AppendFrame target = L46
│ │           └─■ localVerificationTypes: 1 items
│ │             └─■ [0] SimpleVerificationType Double
│ ├─■ [5] ByteCodeMethod accessFlags = [private], prototype = double parseExpression()
│ │ └─■ attributes: 1 items
│ │   └─■ [0] CodeAttribute maxStack = 4, maxLocals = 3
│ │     ├─■ instructions: 25 entries
│ │     │ ├─■ L57: // double x = parseTerm();
│ │     │ ├─■         ALOAD 0
│ │     │ ├─■         INVOKEVIRTUAL reference = Plain; double io.github.mikenakis.bytecode.test.model.Class9WithCode.parseTerm()
│ │     │ ├─■         DSTORE 1
│ │     │ ├─■ L60: // if( eat( '+' ) )
│ │     │ ├─■         ALOAD 0
│ │     │ ├─■         LDC 43
│ │     │ ├─■         INVOKEVIRTUAL reference = Plain; boolean io.github.mikenakis.bytecode.test.model.Class9WithCode.eat( int )
│ │     │ ├─■         IFEQ L62
│ │     │ ├─■ L61: // x += parseTerm(); // addition
│ │     │ ├─■         DLOAD 1
│ │     │ ├─■         ALOAD 0
│ │     │ ├─■         INVOKEVIRTUAL reference = Plain; double io.github.mikenakis.bytecode.test.model.Class9WithCode.parseTerm()
│ │     │ ├─■         DADD
│ │     │ ├─■         DSTORE 1
│ │     │ ├─■         GOTO L60
│ │     │ ├─■ L62: // else if( eat( '-' ) )
│ │     │ ├─■         ALOAD 0
│ │     │ ├─■         LDC 45
│ │     │ ├─■         INVOKEVIRTUAL reference = Plain; boolean io.github.mikenakis.bytecode.test.model.Class9WithCode.eat( int )
│ │     │ ├─■         IFEQ L65
│ │     │ ├─■ L63: // x -= parseTerm(); // subtraction
│ │     │ ├─■         DLOAD 1
│ │     │ ├─■         ALOAD 0
│ │     │ ├─■         INVOKEVIRTUAL reference = Plain; double io.github.mikenakis.bytecode.test.model.Class9WithCode.parseTerm()
│ │     │ ├─■         DSUB
│ │     │ ├─■         DSTORE 1
│ │     │ ├─■         GOTO L60
│ │     │ ├─■ L65: // return x;
│ │     │ ├─■         DLOAD 1
│ │     │ └─■         DRETURN
│ │     ├─■ exceptionInfos: 0 items
│ │     └─■ attributeSet: 3 items
│ │       ├─■ [0] LineNumberTableAttribute; 6 items
│ │       │ ├─■ [0] LineNumberTableEntry lineNumber = 57, start = L57
│ │       │ ├─■ [1] LineNumberTableEntry lineNumber = 60, start = L60
│ │       │ ├─■ [2] LineNumberTableEntry lineNumber = 61, start = L61
│ │       │ ├─■ [3] LineNumberTableEntry lineNumber = 62, start = L62
│ │       │ ├─■ [4] LineNumberTableEntry lineNumber = 63, start = L63
│ │       │ └─■ [5] LineNumberTableEntry lineNumber = 65, start = L65
│ │       ├─■ [1] LocalVariableTableAttribute; 2 items
│ │       │ ├─■ [0] LocalVariableTableEntry index = 0, start = L57, end = @end, prototype = io.github.mikenakis.bytecode.test.model.Class9WithCode this
│ │       │ └─■ [1] LocalVariableTableEntry index = 1, start = L60, end = @end, prototype = double x
│ │       └─■ [2] StackMapTableAttribute; 3 items
│ │         ├─■ [0] AppendFrame target = L60
│ │         │ └─■ localVerificationTypes: 1 items
│ │         │   └─■ [0] SimpleVerificationType Double
│ │         ├─■ [1] SameFrame target = L62
│ │         └─■ [2] SameFrame target = L65
│ ├─■ [6] ByteCodeMethod accessFlags = [private], prototype = double parseTerm()
│ │ └─■ attributes: 1 items
│ │   └─■ [0] CodeAttribute maxStack = 4, maxLocals = 3
│ │     ├─■ instructions: 25 entries
│ │     │ ├─■ L71: // double x = parseFactor();
│ │     │ ├─■         ALOAD 0
│ │     │ ├─■         INVOKEVIRTUAL reference = Plain; double io.github.mikenakis.bytecode.test.model.Class9WithCode.parseFactor()
│ │     │ ├─■         DSTORE 1
│ │     │ ├─■ L74: // if( eat( '*' ) )
│ │     │ ├─■         ALOAD 0
│ │     │ ├─■         LDC 42
│ │     │ ├─■         INVOKEVIRTUAL reference = Plain; boolean io.github.mikenakis.bytecode.test.model.Class9WithCode.eat( int )
│ │     │ ├─■         IFEQ L76
│ │     │ ├─■ L75: // x *= parseFactor(); // multiplication
│ │     │ ├─■         DLOAD 1
│ │     │ ├─■         ALOAD 0
│ │     │ ├─■         INVOKEVIRTUAL reference = Plain; double io.github.mikenakis.bytecode.test.model.Class9WithCode.parseFactor()
│ │     │ ├─■         DMUL
│ │     │ ├─■         DSTORE 1
│ │     │ ├─■         GOTO L74
│ │     │ ├─■ L76: // else if( eat( '/' ) )
│ │     │ ├─■         ALOAD 0
│ │     │ ├─■         LDC 47
│ │     │ ├─■         INVOKEVIRTUAL reference = Plain; boolean io.github.mikenakis.bytecode.test.model.Class9WithCode.eat( int )
│ │     │ ├─■         IFEQ L79
│ │     │ ├─■ L77: // x /= parseFactor(); // division
│ │     │ ├─■         DLOAD 1
│ │     │ ├─■         ALOAD 0
│ │     │ ├─■         INVOKEVIRTUAL reference = Plain; double io.github.mikenakis.bytecode.test.model.Class9WithCode.parseFactor()
│ │     │ ├─■         DDIV
│ │     │ ├─■         DSTORE 1
│ │     │ ├─■         GOTO L74
│ │     │ ├─■ L79: // return x;
│ │     │ ├─■         DLOAD 1
│ │     │ └─■         DRETURN
│ │     ├─■ exceptionInfos: 0 items
│ │     └─■ attributeSet: 3 items
│ │       ├─■ [0] LineNumberTableAttribute; 6 items
│ │       │ ├─■ [0] LineNumberTableEntry lineNumber = 71, start = L71
│ │       │ ├─■ [1] LineNumberTableEntry lineNumber = 74, start = L74
│ │       │ ├─■ [2] LineNumberTableEntry lineNumber = 75, start = L75
│ │       │ ├─■ [3] LineNumberTableEntry lineNumber = 76, start = L76
│ │       │ ├─■ [4] LineNumberTableEntry lineNumber = 77, start = L77
│ │       │ └─■ [5] LineNumberTableEntry lineNumber = 79, start = L79
│ │       ├─■ [1] LocalVariableTableAttribute; 2 items
│ │       │ ├─■ [0] LocalVariableTableEntry index = 0, start = L71, end = @end, prototype = io.github.mikenakis.bytecode.test.model.Class9WithCode this
│ │       │ └─■ [1] LocalVariableTableEntry index = 1, start = L74, end = @end, prototype = double x
│ │       └─■ [2] StackMapTableAttribute; 3 items
│ │         ├─■ [0] AppendFrame target = L74
│ │         │ └─■ localVerificationTypes: 1 items
│ │         │   └─■ [0] SimpleVerificationType Double
│ │         ├─■ [1] SameFrame target = L76
│ │         └─■ [2] SameFrame target = L79
│ └─■ [7] ByteCodeMethod accessFlags = [private], prototype = double parseFactor()
│   └─■ attributes: 1 items
│     └─■ [0] CodeAttribute maxStack = 4, maxLocals = 7
│       ├─■ instructions: 190 entries
│       │ ├─■ L85: // if( eat( '+' ) )
│       │ ├─■         ALOAD 0
│       │ ├─■         LDC 43
│       │ ├─■         INVOKEVIRTUAL reference = Plain; boolean io.github.mikenakis.bytecode.test.model.Class9WithCode.eat( int )
│       │ ├─■         IFEQ L87
│       │ ├─■ L86: // return parseFactor(); // unary plus
│       │ ├─■         ALOAD 0
│       │ ├─■         INVOKEVIRTUAL reference = Plain; double io.github.mikenakis.bytecode.test.model.Class9WithCode.parseFactor()
│       │ ├─■         DRETURN
│       │ ├─■ L87: // if( eat( '-' ) )
│       │ ├─■         ALOAD 0
│       │ ├─■         LDC 45
│       │ ├─■         INVOKEVIRTUAL reference = Plain; boolean io.github.mikenakis.bytecode.test.model.Class9WithCode.eat( int )
│       │ ├─■         IFEQ L91
│       │ ├─■ L88: // return -parseFactor(); // unary minus
│       │ ├─■         ALOAD 0
│       │ ├─■         INVOKEVIRTUAL reference = Plain; double io.github.mikenakis.bytecode.test.model.Class9WithCode.parseFactor()
│       │ ├─■         DNEG
│       │ ├─■         DRETURN
│       │ ├─■ L91: // int startPos = pos;
│       │ ├─■         ALOAD 0
│       │ ├─■         GETFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.pos
│       │ ├─■         ISTORE 3
│       │ ├─■ L92: // if( eat( '(' ) )
│       │ ├─■         ALOAD 0
│       │ ├─■         LDC 40
│       │ ├─■         INVOKEVIRTUAL reference = Plain; boolean io.github.mikenakis.bytecode.test.model.Class9WithCode.eat( int )
│       │ ├─■         IFEQ L98
│       │ ├─■ L95: // x = parseExpression();
│       │ ├─■         ALOAD 0
│       │ ├─■         INVOKEVIRTUAL reference = Plain; double io.github.mikenakis.bytecode.test.model.Class9WithCode.parseExpression()
│       │ ├─■         DSTORE 1
│       │ ├─■ L96: // eat( ')' );
│       │ ├─■         ALOAD 0
│       │ ├─■         LDC 41
│       │ ├─■         INVOKEVIRTUAL reference = Plain; boolean io.github.mikenakis.bytecode.test.model.Class9WithCode.eat( int )
│       │ ├─■         POP
│       │ ├─■         GOTO L128
│       │ ├─■ L98: // else if( (ch >= '0' && ch <= '9') || ch == '.' )
│       │ ├─■         ALOAD 0
│       │ ├─■         GETFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.ch
│       │ ├─■         LDC 48
│       │ ├─■         IF_ICMPLT T1
│       │ ├─■         ALOAD 0
│       │ ├─■         GETFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.ch
│       │ ├─■         LDC 57
│       │ ├─■         IF_ICMPLE L101
│       │ ├─■ T1:     ALOAD 0
│       │ ├─■         GETFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.ch
│       │ ├─■         LDC 46
│       │ ├─■         IF_ICMPNE L105
│       │ ├─■ L101: // while( (ch >= '0' && ch <= '9') || ch == '.' )
│       │ ├─■         ALOAD 0
│       │ ├─■         GETFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.ch
│       │ ├─■         LDC 48
│       │ ├─■         IF_ICMPLT T2
│       │ ├─■         ALOAD 0
│       │ ├─■         GETFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.ch
│       │ ├─■         LDC 57
│       │ ├─■         IF_ICMPLE L102
│       │ ├─■ T2:     ALOAD 0
│       │ ├─■         GETFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.ch
│       │ ├─■         LDC 46
│       │ ├─■         IF_ICMPNE L103
│       │ ├─■ L102: // nextChar();
│       │ ├─■         ALOAD 0
│       │ ├─■         INVOKEVIRTUAL reference = Plain; void io.github.mikenakis.bytecode.test.model.Class9WithCode.nextChar()
│       │ ├─■         GOTO L101
│       │ ├─■ L103: // x = Double.parseDouble( str.substring( startPos, pos ) );
│       │ ├─■         ALOAD 0
│       │ ├─■         GETFIELD java.lang.String io.github.mikenakis.bytecode.test.model.Class9WithCode.str
│       │ ├─■         ILOAD 3
│       │ ├─■         ALOAD 0
│       │ ├─■         GETFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.pos
│       │ ├─■         INVOKEVIRTUAL reference = Plain; java.lang.String java.lang.String.substring( int, int )
│       │ ├─■         INVOKESTATIC reference = Plain; double java.lang.Double.parseDouble( java.lang.String )
│       │ ├─■         DSTORE 1
│       │ ├─■ T3:     GOTO L128
│       │ ├─■ L105: // else if( ch >= 'a' && ch <= 'z' )
│       │ ├─■         ALOAD 0
│       │ ├─■         GETFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.ch
│       │ ├─■         LDC 97
│       │ ├─■         IF_ICMPLT L125
│       │ ├─■         ALOAD 0
│       │ ├─■         GETFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.ch
│       │ ├─■         LDC 122
│       │ ├─■         IF_ICMPGT L125
│       │ ├─■ L108: // while( ch >= 'a' && ch <= 'z' )
│       │ ├─■         ALOAD 0
│       │ ├─■         GETFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.ch
│       │ ├─■         LDC 97
│       │ ├─■         IF_ICMPLT L110
│       │ ├─■         ALOAD 0
│       │ ├─■         GETFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.ch
│       │ ├─■         LDC 122
│       │ ├─■         IF_ICMPGT L110
│       │ ├─■ L109: // nextChar();
│       │ ├─■         ALOAD 0
│       │ ├─■         INVOKEVIRTUAL reference = Plain; void io.github.mikenakis.bytecode.test.model.Class9WithCode.nextChar()
│       │ ├─■         GOTO L108
│       │ ├─■ L110: // String func = str.substring( startPos, pos );
│       │ ├─■         ALOAD 0
│       │ ├─■         GETFIELD java.lang.String io.github.mikenakis.bytecode.test.model.Class9WithCode.str
│       │ ├─■         ILOAD 3
│       │ ├─■         ALOAD 0
│       │ ├─■         GETFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.pos
│       │ ├─■         INVOKEVIRTUAL reference = Plain; java.lang.String java.lang.String.substring( int, int )
│       │ ├─■         ASTORE 4
│       │ ├─■ L111: // x = parseFactor();
│       │ ├─■         ALOAD 0
│       │ ├─■         INVOKEVIRTUAL reference = Plain; double io.github.mikenakis.bytecode.test.model.Class9WithCode.parseFactor()
│       │ ├─■         DSTORE 1
│       │ ├─■ L112: // x = switch( func )
│       │ ├─■         ALOAD 4
│       │ ├─■         ASTORE 5
│       │ ├─■         LDC -1
│       │ ├─■         ISTORE 6
│       │ ├─■         ALOAD 5
│       │ ├─■         INVOKEVIRTUAL reference = Plain; int java.lang.String.hashCode()
│       │ ├─■         LOOKUPSWITCH default = T10; 6 items
│       │ │ ├─■ [0]         LookupSwitchEntry value = 98695, target = T6
│       │ │ ├─■ [1]         LookupSwitchEntry value = 99334, target = T9
│       │ │ ├─■ [2]         LookupSwitchEntry value = 112661, target = T8
│       │ │ ├─■ [3]         LookupSwitchEntry value = 113880, target = T5
│       │ │ ├─■ [4]         LookupSwitchEntry value = 114593, target = T7
│       │ │ └─■ [5]         LookupSwitchEntry value = 3538208, target = T4
│       │ ├─■ T4:     ALOAD 5
│       │ ├─■         LDC "sqrt"
│       │ ├─■         INVOKEVIRTUAL reference = Plain; boolean java.lang.String.equals( java.lang.Object )
│       │ ├─■         IFEQ T10
│       │ ├─■         LDC 0
│       │ ├─■         ISTORE 6
│       │ ├─■         GOTO T10
│       │ ├─■ T5:     ALOAD 5
│       │ ├─■         LDC "sin"
│       │ ├─■         INVOKEVIRTUAL reference = Plain; boolean java.lang.String.equals( java.lang.Object )
│       │ ├─■         IFEQ T10
│       │ ├─■         LDC 1
│       │ ├─■         ISTORE 6
│       │ ├─■         GOTO T10
│       │ ├─■ T6:     ALOAD 5
│       │ ├─■         LDC "cos"
│       │ ├─■         INVOKEVIRTUAL reference = Plain; boolean java.lang.String.equals( java.lang.Object )
│       │ ├─■         IFEQ T10
│       │ ├─■         LDC 2
│       │ ├─■         ISTORE 6
│       │ ├─■         GOTO T10
│       │ ├─■ T7:     ALOAD 5
│       │ ├─■         LDC "tan"
│       │ ├─■         INVOKEVIRTUAL reference = Plain; boolean java.lang.String.equals( java.lang.Object )
│       │ ├─■         IFEQ T10
│       │ ├─■         LDC 3
│       │ ├─■         ISTORE 6
│       │ ├─■         GOTO T10
│       │ ├─■ T8:     ALOAD 5
│       │ ├─■         LDC "rad"
│       │ ├─■         INVOKEVIRTUAL reference = Plain; boolean java.lang.String.equals( java.lang.Object )
│       │ ├─■         IFEQ T10
│       │ ├─■         LDC 4
│       │ ├─■         ISTORE 6
│       │ ├─■         GOTO T10
│       │ ├─■ T9:     ALOAD 5
│       │ ├─■         LDC "deg"
│       │ ├─■         INVOKEVIRTUAL reference = Plain; boolean java.lang.String.equals( java.lang.Object )
│       │ ├─■         IFEQ T10
│       │ ├─■         LDC 5
│       │ ├─■         ISTORE 6
│       │ ├─■ T10:    ILOAD 6
│       │ ├─■         TABLESWITCH lowValue = 0, default = L120; 6 items
│       │ │ ├─■ [0]         L114
│       │ │ ├─■ [1]         L115
│       │ │ ├─■ [2]         L116
│       │ │ ├─■ [3]         L117
│       │ │ ├─■ [4]         L118
│       │ │ └─■ [5]         L119
│       │ ├─■ L114: // case "sqrt" -> Math.sqrt( x );
│       │ ├─■         DLOAD 1
│       │ ├─■         INVOKESTATIC reference = Plain; double java.lang.Math.sqrt( double )
│       │ ├─■         GOTO T11
│       │ ├─■ L115: // case "sin" -> Math.sin( x );
│       │ ├─■         DLOAD 1
│       │ ├─■         INVOKESTATIC reference = Plain; double java.lang.Math.sin( double )
│       │ ├─■         GOTO T11
│       │ ├─■ L116: // case "cos" -> Math.cos( x );
│       │ ├─■         DLOAD 1
│       │ ├─■         INVOKESTATIC reference = Plain; double java.lang.Math.cos( double )
│       │ ├─■         GOTO T11
│       │ ├─■ L117: // case "tan" -> Math.tan( x );
│       │ ├─■         DLOAD 1
│       │ ├─■         INVOKESTATIC reference = Plain; double java.lang.Math.tan( double )
│       │ ├─■         GOTO T11
│       │ ├─■ L118: // case "rad" -> Math.toRadians( x );
│       │ ├─■         DLOAD 1
│       │ ├─■         INVOKESTATIC reference = Plain; double java.lang.Math.toRadians( double )
│       │ ├─■         GOTO T11
│       │ ├─■ L119: // case "deg" -> Math.toDegrees( x );
│       │ ├─■         DLOAD 1
│       │ ├─■         INVOKESTATIC reference = Plain; double java.lang.Math.toDegrees( double )
│       │ ├─■         GOTO T11
│       │ ├─■ L120: // default -> throw new RuntimeException( "Unknown function: " + func );
│       │ ├─■         NEW java.lang.RuntimeException
│       │ ├─■         DUP
│       │ ├─■         ALOAD 4
│       │ ├─■         INVOKEDYNAMIC prototype = java.lang.String makeConcatWithConstants( java.lang.String )
│       │ │ └─■                 bootstrapMethod: BootstrapMethod methodHandle = MethodHandleDesc[STATIC/StringConcatFactory::makeConcatWithConstants(MethodHandles$Lookup,String,MethodType,String,Object[])CallSite] arguments: StringValueConstant( "Unknown function: \u0001" )
│       │ ├─■         INVOKESPECIAL reference = Plain; void java.lang.RuntimeException.<init>( java.lang.String )
│       │ ├─■         ATHROW
│       │ ├─■ T11:    DSTORE 1
│       │ ├─■ L122: // }
│       │ ├─■         GOTO L128
│       │ ├─■ L125: // throw new RuntimeException( "Unexpected: " + (char)ch );
│       │ ├─■         NEW java.lang.RuntimeException
│       │ ├─■         DUP
│       │ ├─■         ALOAD 0
│       │ ├─■         GETFIELD int io.github.mikenakis.bytecode.test.model.Class9WithCode.ch
│       │ ├─■         I2C
│       │ ├─■         INVOKEDYNAMIC prototype = java.lang.String makeConcatWithConstants( char )
│       │ │ └─■                 bootstrapMethod: BootstrapMethod methodHandle = MethodHandleDesc[STATIC/StringConcatFactory::makeConcatWithConstants(MethodHandles$Lookup,String,MethodType,String,Object[])CallSite] arguments: StringValueConstant( "Unexpected: \u0001" )
│       │ ├─■         INVOKESPECIAL reference = Plain; void java.lang.RuntimeException.<init>( java.lang.String )
│       │ ├─■         ATHROW
│       │ ├─■ L128: // if( eat( '^' ) )
│       │ ├─■         ALOAD 0
│       │ ├─■         LDC 94
│       │ ├─■         INVOKEVIRTUAL reference = Plain; boolean io.github.mikenakis.bytecode.test.model.Class9WithCode.eat( int )
│       │ ├─■         IFEQ L131
│       │ ├─■ L129: // x = Math.pow( x, parseFactor() ); // exponentiation
│       │ ├─■         DLOAD 1
│       │ ├─■         ALOAD 0
│       │ ├─■         INVOKEVIRTUAL reference = Plain; double io.github.mikenakis.bytecode.test.model.Class9WithCode.parseFactor()
│       │ ├─■         INVOKESTATIC reference = Plain; double java.lang.Math.pow( double, double )
│       │ ├─■         DSTORE 1
│       │ ├─■ L131: // return x;
│       │ ├─■         DLOAD 1
│       │ └─■         DRETURN
│       ├─■ exceptionInfos: 0 items
│       └─■ attributeSet: 3 items
│         ├─■ [0] LineNumberTableAttribute; 30 items
│         │ ├─■ [0] LineNumberTableEntry lineNumber = 85, start = L85
│         │ ├─■ [1] LineNumberTableEntry lineNumber = 86, start = L86
│         │ ├─■ [2] LineNumberTableEntry lineNumber = 87, start = L87
│         │ ├─■ [3] LineNumberTableEntry lineNumber = 88, start = L88
│         │ ├─■ [4] LineNumberTableEntry lineNumber = 91, start = L91
│         │ ├─■ [5] LineNumberTableEntry lineNumber = 92, start = L92
│         │ ├─■ [6] LineNumberTableEntry lineNumber = 95, start = L95
│         │ ├─■ [7] LineNumberTableEntry lineNumber = 96, start = L96
│         │ ├─■ [8] LineNumberTableEntry lineNumber = 98, start = L98
│         │ ├─■ [9] LineNumberTableEntry lineNumber = 101, start = L101
│         │ ├─■ [10] LineNumberTableEntry lineNumber = 102, start = L102
│         │ ├─■ [11] LineNumberTableEntry lineNumber = 103, start = L103
│         │ ├─■ [12] LineNumberTableEntry lineNumber = 105, start = L105
│         │ ├─■ [13] LineNumberTableEntry lineNumber = 108, start = L108
│         │ ├─■ [14] LineNumberTableEntry lineNumber = 109, start = L109
│         │ ├─■ [15] LineNumberTableEntry lineNumber = 110, start = L110
│         │ ├─■ [16] LineNumberTableEntry lineNumber = 111, start = L111
│         │ ├─■ [17] LineNumberTableEntry lineNumber = 112, start = L112
│         │ ├─■ [18] LineNumberTableEntry lineNumber = 114, start = L114
│         │ ├─■ [19] LineNumberTableEntry lineNumber = 115, start = L115
│         │ ├─■ [20] LineNumberTableEntry lineNumber = 116, start = L116
│         │ ├─■ [21] LineNumberTableEntry lineNumber = 117, start = L117
│         │ ├─■ [22] LineNumberTableEntry lineNumber = 118, start = L118
│         │ ├─■ [23] LineNumberTableEntry lineNumber = 119, start = L119
│         │ ├─■ [24] LineNumberTableEntry lineNumber = 120, start = L120
│         │ ├─■ [25] LineNumberTableEntry lineNumber = 122, start = L122
│         │ ├─■ [26] LineNumberTableEntry lineNumber = 125, start = L125
│         │ ├─■ [27] LineNumberTableEntry lineNumber = 128, start = L128
│         │ ├─■ [28] LineNumberTableEntry lineNumber = 129, start = L129
│         │ └─■ [29] LineNumberTableEntry lineNumber = 131, start = L131
│         ├─■ [1] LocalVariableTableAttribute; 7 items
│         │ ├─■ [0] LocalVariableTableEntry index = 1, start = L96, end = L98, prototype = double x
│         │ ├─■ [1] LocalVariableTableEntry index = 1, start = T3, end = L105, prototype = double x
│         │ ├─■ [2] LocalVariableTableEntry index = 4, start = L111, end = L122, prototype = java.lang.String func
│         │ ├─■ [3] LocalVariableTableEntry index = 1, start = L112, end = L125, prototype = double x
│         │ ├─■ [4] LocalVariableTableEntry index = 0, start = L85, end = @end, prototype = io.github.mikenakis.bytecode.test.model.Class9WithCode this
│         │ ├─■ [5] LocalVariableTableEntry index = 1, start = L128, end = @end, prototype = double x
│         │ └─■ [6] LocalVariableTableEntry index = 3, start = L92, end = @end, prototype = int startPos
│         └─■ [2] StackMapTableAttribute; 29 items
│           ├─■ [0] SameFrame target = L87
│           ├─■ [1] SameFrame target = L91
│           ├─■ [2] AppendFrame target = L98
│           │ └─■ localVerificationTypes: 3 items
│           │   ├─■ [0] SimpleVerificationType Top
│           │   ├─■ [1] SimpleVerificationType Top
│           │   └─■ [2] SimpleVerificationType Integer
│           ├─■ [3] SameFrame target = T1
│           ├─■ [4] SameFrame target = L101
│           ├─■ [5] SameFrame target = T2
│           ├─■ [6] SameFrame target = L102
│           ├─■ [7] SameFrame target = L103
│           ├─■ [8] SameFrame target = L105
│           ├─■ [9] SameFrame target = L108
│           ├─■ [10] SameFrame target = L110
│           ├─■ [11] FullFrame target = T4
│           │ ├─■ localVerificationTypes: 6 items
│           │ │ ├─■ [0] ObjectVerificationType type = io.github.mikenakis.bytecode.test.model.Class9WithCode
│           │ │ ├─■ [1] SimpleVerificationType Double
│           │ │ ├─■ [2] SimpleVerificationType Integer
│           │ │ ├─■ [3] ObjectVerificationType type = java.lang.String
│           │ │ ├─■ [4] ObjectVerificationType type = java.lang.String
│           │ │ └─■ [5] SimpleVerificationType Integer
│           │ └─■ stackVerificationTypes: 0 items
│           ├─■ [12] SameFrame target = T5
│           ├─■ [13] SameFrame target = T6
│           ├─■ [14] SameFrame target = T7
│           ├─■ [15] SameFrame target = T8
│           ├─■ [16] SameFrame target = T9
│           ├─■ [17] SameFrame target = T10
│           ├─■ [18] SameFrame target = L114
│           ├─■ [19] SameFrame target = L115
│           ├─■ [20] SameFrame target = L116
│           ├─■ [21] SameFrame target = L117
│           ├─■ [22] SameFrame target = L118
│           ├─■ [23] SameFrame target = L119
│           ├─■ [24] SameFrame target = L120
│           ├─■ [25] FullFrame target = T11
│           │ ├─■ localVerificationTypes: 4 items
│           │ │ ├─■ [0] ObjectVerificationType type = io.github.mikenakis.bytecode.test.model.Class9WithCode
│           │ │ ├─■ [1] SimpleVerificationType Double
│           │ │ ├─■ [2] SimpleVerificationType Integer
│           │ │ └─■ [3] ObjectVerificationType type = java.lang.String
│           │ └─■ stackVerificationTypes: 1 items
│           │   └─■ [0] SimpleVerificationType Double
│           ├─■ [26] FullFrame target = L125
│           │ ├─■ localVerificationTypes: 4 items
│           │ │ ├─■ [0] ObjectVerificationType type = io.github.mikenakis.bytecode.test.model.Class9WithCode
│           │ │ ├─■ [1] SimpleVerificationType Top
│           │ │ ├─■ [2] SimpleVerificationType Top
│           │ │ └─■ [3] SimpleVerificationType Integer
│           │ └─■ stackVerificationTypes: 0 items
│           ├─■ [27] FullFrame target = L128
│           │ ├─■ localVerificationTypes: 3 items
│           │ │ ├─■ [0] ObjectVerificationType type = io.github.mikenakis.bytecode.test.model.Class9WithCode
│           │ │ ├─■ [1] SimpleVerificationType Double
│           │ │ └─■ [2] SimpleVerificationType Integer
│           │ └─■ stackVerificationTypes: 0 items
│           └─■ [28] SameFrame target = L131
└─■ attributeSet: 2 items
  ├─■ [0] SourceFileAttribute "Class9WithCode.java"
  └─■ [1] InnerClassesAttribute; 1 items
    └─■ [0] InnerClass accessFlags = [public, static, final], innerClass = java.lang.invoke.MethodHandles$Lookup, outerClass = java.lang.invoke.MethodHandles, innerName = Lookup
