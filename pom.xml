<project xmlns="http://maven.apache.org/POM/4.0.0"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>mikenakis</groupId>
	<artifactId>public-parent</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>pom</packaging>

	<url>https://github.com/mikenakis/Public</url>

	<licenses>
		<license>
			<name>No Permission License - All Rights Reserved</name>
			<url>https://choosealicense.com/no-permission/</url>
		</license>
	</licenses>

	<developers>
		<developer>
			<name>Mike Nakis</name>
			<email>pom.xml@michael.gr</email>
			<organization>michael.gr</organization>
			<organizationUrl>http://michael.gr</organizationUrl>
		</developer>
	</developers>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<modules>
		<module>agentclaire</module>
		<module>benchmark</module>
		<module>bytecode</module>
		<module>classdump</module>
		<module>clio</module>
		<module>intertwine</module>
		<module>kit</module>
		<module>kit-test</module>
		<module>rumination</module>
		<module>slf4j-to-kit</module>
		<module>starwars-dataset</module>
		<module>testana</module>
	</modules>

	<build>
		<directory>${env.OUT}/${project.groupId}/${project.artifactId}</directory>
		<resources>
			<resource>
				<directory>resources</directory>
				<includes>
					<include>*</include>
				</includes>
			</resource>
		</resources>
		<plugins>

			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.7.0</version>
				<configuration>
					<source>16</source>
					<target>16</target>

					<compilerArgs>

						<!-- The "-parameters" option "Generates metadata for reflection on method parameters." That's good, we want this. -->
						<arg>-parameters</arg>

						<!-- The "-Xlint" option enables all recommended warnings. We will then suppress some that we have no use for. -->
						<arg>-Xlint</arg>

						<!-- The "try" sub-option of the "Xlint" option is mind-bogglingly stupid.
						     It lives in a simplistic world in which resources are always created, used, and disposed within the a single function,
						     so it aims to warn you that you forgot to dispose a resource within the function that created it.
						     The following possibilities never occurred to the mastermind who invented this option:
						      - that you might invoke a function which creates a resource and returns it to the function that will use the
						        the resource and then of course dispose it.
						      - that you might create a resource and store it as a member variable of a containing object, which will of course
						        dispose the resource when it gets disposed.
						     So, the only reasonable thing to do with this warning is to always keep it disabled. -->
						<arg>-Xlint:-try</arg>

						<!-- The "serial" sub-option of the "Xlint" option "Warns about missing serialVersionUID definitions on serializable
						     classes".
						     In other words, every single time you extend some predefined class, you will be hit with an annoying warning
						     just because the class you are extending happens to be serializable, a feature which you usually have no use for,
						     don't care about, and don't want to know anything about. -->
						<arg>-Xlint:-serial</arg>

						<!-- If there are any warnings, we want compilation to fail. We don't want any half-measures. -->
						<arg>-Werror</arg>

						<!-- When the packaging is 'jar', IntellijIdea insists on creating a 'target/generated-sources/annotations' directory
						     in our source tree each time we build,
						     and it does this even if we have specified that we do not want annotation processing.
						     Furthermore, it does this even if we have specified that classes should be written elsewhere, precisely because
						     we do not want our source code tree being littered with 'target' directories.
						     The only way I have found to prevent this is by explicitly disabling annotation processing with -proc:none -->
						<arg>-proc:none</arg>

					</compilerArgs>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>3.0.0-M3</version>
				<executions>
					<execution>
						<id>enforce-property</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireProperty>
									<property>env.OUT</property>
									<message>
										Environment variable 'OUT' is missing.
										The 'OUT' environment variable must be specified
										and it must point to the directory where output files will be stored.
										(for example, ~/temp/out)
									</message>
								</requireProperty>
							</rules>
							<fail>true</fail>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.0</version>
				<configuration>
					<includes>
						<!-- PEARL: the maven-surefire-plugin:
						    1. unnecessarily complicates things with a useless concept of inclusions and exclusions
							2. sabotages the developer with default inclusions that pretty much require test class names to contain the word "Test".
							(That's what you always achieve when you unnecessarily complicate things: you sabotage people.)
							We correct this problem here by annihilating the plugin's concept of inclusions. -->
						<include>**/*.java</include>
					</includes>
				</configuration>
			</plugin>

		</plugins>
	</build>

	<repositories>
		<repository>
			<id>repsy-mikenakis-public</id>
			<url>https://repo.repsy.io/mvn/mikenakis/mikenakis-public</url>
		</repository>
	</repositories>

	<distributionManagement>
		<repository>
			<id>repsy-mikenakis-public</id>
			<url>https://repo.repsy.io/mvn/mikenakis/mikenakis-public</url>
		</repository>
	</distributionManagement>

</project>
